{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0.1.0.0
synopsis:            Advent of Code {{name}}
homepage:            https://github.com/https://github.com/CarstenKoenig/AdventOfCode2015/{{name}}/readme.md
license:             MIT
license-file:        ../LICENSE
author:              Carsten König
maintainer:          Carsten.gettingsharper.de
copyright:           Carsten König 2017
category:            Fun
build-type:          Simple
extra-source-files:  readme.md
cabal-version:       >=1.10

library
  hs-source-dirs:      src
  exposed-modules:     Solution
  build-depends:       base >= 4.7 && < 5
                     , containers
  default-language:    Haskell2010

executable {{name}}
  hs-source-dirs:      app
  main-is:             Main.hs
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
  build-depends:       base
                     , {{name}}
  default-language:    Haskell2010

test-suite {{name}}-test
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  main-is:             Spec.hs
  other-modules:       SolutionSpec
  build-depends:       base
                     , {{name}}
                     , hspec
                     , QuickCheck
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
  default-language:    Haskell2010

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/SolutionSpec.hs #-}
module SolutionSpec (main, spec) where

import Test.Hspec
import Test.QuickCheck

import Solution

-- `main` is here so that this module can be run from GHCi on its own.  It is
-- not needed for automatic spec discovery.
main :: IO ()
main = hspec spec

spec :: Spec
spec = do
  describe "part1" $ do
    it "should return () for ()" $ do
      part1 () `shouldBe` ()

{-# START_FILE src/Solution.hs #-}
module Solution (readInput, part1, part2)  where


type Input = ()


part1 :: Input -> ()
part1 inp = ()


part2 :: Input -> ()
part2 inp = ()


readInput :: IO Input
readInput = return ()

{-# START_FILE app/Main.hs #-}
module Main where

import Solution

main :: IO ()
main = do
  inp <- readInput

  putStrLn $ "part 1: " ++ show (part1 inp)
  putStrLn $ "part 2: " ++ show (part2 inp)
{-# START_FILE readme.md #-}
# Advent of Code {{name}}

add description of {{name}} here
